const fs = require('fs').promises;
const path = require('path');

const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const REPO_OWNER = process.env.REPO_OWNER;
const REPO_NAME = process.env.REPO_NAME;

if (!GITHUB_TOKEN || !REPO_OWNER || !REPO_NAME) {
  console.error('‚ùå Missing required environment variables: GITHUB_TOKEN, GITHUB_REPOSITORY_OWNER, GITHUB_REPOSITORY');
  process.exit(1);
}

let ownerType = null; // Will be set to 'User' or 'Organization'
let ownerInfo = null; // Will contain owner details

async function makeGitHubRequest(endpoint, method = 'GET', body = null) {
  const response = await fetch(`https://api.github.com${endpoint}`, {
    method,
    headers: {
      'Authorization': `Bearer ${GITHUB_TOKEN}`,
      'Accept': 'application/vnd.github+json',
      'X-GitHub-Api-Version': '2022-11-28',
      ...(body ? { 'Content-Type': 'application/json' } : {})
    },
    ...(body ? { body: JSON.stringify(body) } : {})
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`GitHub API error (${response.status}): ${errorText}`);
  }

  return response.json();
}

async function detectOwnerType() {
  console.log('üîç Detecting account type...');
  
  try {
    // Try to get user/org info
    const ownerData = await makeGitHubRequest(`/users/${REPO_OWNER}`);
    ownerType = ownerData.type; // 'User' or 'Organization'
    ownerInfo = ownerData;
    
    if (ownerType === 'Organization') {
      console.log(`‚úÖ Detected organization: ${ownerData.name || REPO_OWNER}`);
    } else {
      console.log(`‚úÖ Detected personal account: ${ownerData.name || REPO_OWNER}`);
    }
    
    return ownerType;
  } catch (error) {
    console.error('‚ö†Ô∏è  Could not detect account type:', error.message);
    console.log('üîÑ Defaulting to personal account');
    ownerType = 'User';
    return ownerType;
  }
}

async function enableDiscussions() {
  console.log('üìù Enabling GitHub Discussions...');
  
  try {
    await makeGitHubRequest(`/repos/${REPO_OWNER}/${REPO_NAME}`, 'PATCH', {
      has_discussions: true
    });
    console.log('‚úÖ GitHub Discussions enabled');
  } catch (error) {
    if (error.message.includes('403')) {
      console.log('‚ö†Ô∏è  Discussions may already be enabled or insufficient permissions');
    } else {
      throw error;
    }
  }
}

async function enableGitHubPages() {
  console.log('üåê Setting up GitHub Pages...');
  
  try {
    await makeGitHubRequest(`/repos/${REPO_OWNER}/${REPO_NAME}/pages`, 'POST', {
      source: {
        branch: 'main',
        path: '/docs'
      }
    });
    console.log('‚úÖ GitHub Pages enabled (serving from /docs)');
  } catch (error) {
    if (error.message.includes('409') || error.message.includes('already exists')) {
      console.log('‚ö†Ô∏è  GitHub Pages already configured');
    } else {
      console.log('‚ö†Ô∏è  Could not enable GitHub Pages:', error.message);
    }
  }
}

async function createDiscussionCategories() {
  console.log('üìÇ Setting up discussion categories...');
  
  // Get existing categories first
  try {
    const categories = await makeGitHubRequest(`/repos/${REPO_OWNER}/${REPO_NAME}/discussions/categories`);
    const existingCategories = categories.map(cat => cat.name);
    
    const defaultCategories = [
      { name: 'Q&A', emoji: '‚ùì', description: 'Ask the community for help' },
      { name: 'General', emoji: 'üí¨', description: 'Chat about anything and everything here' },
      { name: 'Ideas', emoji: 'üí°', description: 'Share ideas for new features' },
      { name: 'Show and tell', emoji: 'üôå', description: 'Show off something you\'ve made' },
      { name: 'Announcements', emoji: 'üì¢', description: 'Updates from maintainers' }
    ];

    for (const category of defaultCategories) {
      if (!existingCategories.includes(category.name)) {
        try {
          await makeGitHubRequest(`/repos/${REPO_OWNER}/${REPO_NAME}/discussions/categories`, 'POST', category);
          console.log(`‚úÖ Created category: ${category.name}`);
        } catch (error) {
          console.log(`‚ö†Ô∏è  Could not create category ${category.name}:`, error.message);
        }
      } else {
        console.log(`‚ö†Ô∏è  Category already exists: ${category.name}`);
      }
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  Could not manage discussion categories:', error.message);
  }
}

async function updateConfigFile() {
  console.log('‚öôÔ∏è  Updating config.js...');
  
  const configContent = `/**
 * Doorway Configuration
 * 
 * This file was automatically generated by setup.js
 * You can modify these values as needed for your project.
 */

window.DOORWAY_CONFIG = {
  repository: {
    owner: '${REPO_OWNER}',
    name: '${REPO_NAME}'
  },
  
  owner: {
    type: '${ownerType}', // 'User' or 'Organization'
    name: '${ownerInfo?.name || REPO_OWNER}',
    login: '${REPO_OWNER}',
    isPersonal: ${ownerType === 'User'}
  },
  
  settings: {
    enableAnalytics: true,
    defaultItemsPerPage: 20,
    showOrgSpecificFeatures: ${ownerType === 'Organization'}
  },
  
  ui: {
    // Customize UI based on account type
    analyticsTitle: '${ownerType === 'Organization' ? 'Organization Analytics' : 'Repository Analytics'}',
    showMemberCount: ${ownerType === 'Organization'},
    showContributorStats: true,
    ownerLabel: '${ownerType === 'Organization' ? 'Organization' : 'Owner'}'
  }
};`;

  try {
    await fs.writeFile(path.join(process.cwd(), 'docs', 'js', 'config.js'), configContent);
    console.log('‚úÖ Updated config.js with account-specific settings');
  } catch (error) {
    console.error('‚ùå Failed to update config.js:', error.message);
  }
}

async function fetchDiscussionsData() {
  console.log('üìä Fetching discussions data...');
  
  const query = `
    query GetDiscussions($owner: String!, $repo: String!) {
      repository(owner: $owner, name: $repo) {
        discussions(first: 100, orderBy: {field: UPDATED_AT, direction: DESC}) {
          totalCount
          nodes {
            id
            number
            title
            body
            category {
              id
              name
              emoji
            }
            author {
              login
              avatarUrl
            }
            createdAt
            updatedAt
            upvoteCount
            isAnswered
            comments {
              totalCount
            }
            labels(first: 10) {
              nodes {
                name
                color
              }
            }
          }
        }
        discussionCategories(first: 10) {
          nodes {
            id
            name
            emoji
            description
          }
        }
      }
    }
  `;

  try {
    const response = await fetch('https://api.github.com/graphql', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${GITHUB_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        query,
        variables: { owner: REPO_OWNER, repo: REPO_NAME }
      })
    });

    const data = await response.json();
    
    if (data.errors) {
      throw new Error(`GraphQL errors: ${JSON.stringify(data.errors)}`);
    }

    // Process discussions data
    const discussions = data.data.repository.discussions.nodes.map(discussion => ({
      id: discussion.id,
      number: discussion.number,
      title: discussion.title,
      body: discussion.body?.substring(0, 200) + '...',
      category: discussion.category?.name || 'General',
      categoryEmoji: discussion.category?.emoji || 'üí¨',
      author: discussion.author?.login || 'Unknown',
      authorAvatar: discussion.author?.avatarUrl || '',
      createdAt: discussion.createdAt,
      updatedAt: discussion.updatedAt,
      upvotes: discussion.upvoteCount,
      isAnswered: discussion.isAnswered,
      commentCount: discussion.comments.totalCount,
      labels: discussion.labels.nodes || []
    }));

    // Count discussions by category
    const categoryCounts = {};
    discussions.forEach(d => {
      categoryCounts[d.category] = (categoryCounts[d.category] || 0) + 1;
    });

    const processedData = {
      lastUpdated: new Date().toISOString(),
      totalCount: data.data.repository.discussions.totalCount,
      discussions: discussions,
      categories: data.data.repository.discussionCategories.nodes,
      categoryCounts: categoryCounts,
      ownerType: ownerType, // Add owner type to data
      ownerInfo: {
        type: ownerType,
        name: ownerInfo?.name || REPO_OWNER,
        login: REPO_OWNER
      }
    };

    await fs.writeFile(path.join(process.cwd(), 'docs', 'data', 'discussions.json'), JSON.stringify(processedData, null, 2));
    console.log(`‚úÖ Updated discussions.json with ${discussions.length} discussions`);

  } catch (error) {
    console.error('‚ùå Failed to fetch discussions data:', error.message);
  }
}

async function createInitialAnalyticsData() {
  console.log('üìà Creating initial analytics data...');
  
  try {
    // Create basic analytics structure that works for both personal and org accounts
    const initialAnalytics = {
      lastUpdated: new Date().toISOString(),
      ownerType: ownerType,
      ownerInfo: {
        type: ownerType,
        name: ownerInfo?.name || REPO_OWNER,
        login: REPO_OWNER,
        isPersonal: ownerType === 'User'
      },
      metrics: {
        totalDiscussions: 0,
        avgResponseTime: '0h',
        resolutionRate: '0%',
        satisfactionScore: 4.0,
        activeContributors: 0
      },
      trends: {
        discussions: { current: 0, trend: '', change: 0 },
        responseTime: { current: 0, trend: '', change: 0 },
        resolution: { current: 0, trend: '', change: 0 }
      },
      charts: {
        discussionVolume: [],
        categories: [],
        resolutionStatus: { answered: 0, unanswered: 0 }
      },
      owner: null, // Will be populated by the analytics script
      contributors: [],
      mostActiveDiscussions: []
    };

    // Ensure data directory exists
    await fs.mkdir(path.join(process.cwd(), 'docs', 'data'), { recursive: true });
    
    await fs.writeFile(
      path.join(process.cwd(), 'docs', 'data', 'analytics.json'), 
      JSON.stringify(initialAnalytics, null, 2)
    );
    console.log('‚úÖ Created initial analytics.json');
  } catch (error) {
    console.error('‚ùå Failed to create analytics data:', error.message);
  }
}

async function createWelcomeDiscussion() {
  console.log('üëã Creating welcome discussion...');
  
  try {
    // First, get the General category ID
    const categories = await makeGitHubRequest(`/repos/${REPO_OWNER}/${REPO_NAME}/discussions/categories`);
    const generalCategory = categories.find(cat => cat.name === 'General' || cat.name === 'Announcements');
    
    if (!generalCategory) {
      console.log('‚ö†Ô∏è  No suitable category found for welcome discussion');
      return;
    }

    const accountTypeText = ownerType === 'Organization' ? 'organization' : 'project';
    const welcomeBody = `# Welcome to our Support Portal! üéâ

This community support portal has been automatically set up for our ${accountTypeText} to help you get answers to your questions and connect with other users.

## How to get help:
- üîç **Search first**: Check if your question has already been answered
- ‚ùì **Ask questions** in the Q&A category  
- üí° **Share ideas** for new features or improvements
- üôå **Show off** what you've built with our project

## Guidelines:
- Be respectful and helpful to other community members
- Provide clear details when asking questions
- Use appropriate categories for your discussions
- Search before posting to avoid duplicates

${ownerType === 'Organization' ? 
  'This portal serves our entire organization and all community members are welcome!' : 
  'Thanks for checking out my project! Feel free to ask questions or share feedback.'
}

---
*This portal was automatically configured using Doorway - a zero-cost help desk solution powered by GitHub Discussions.*`;

    await makeGitHubRequest(`/repos/${REPO_OWNER}/${REPO_NAME}/discussions`, 'POST', {
      title: `Welcome to our Support Portal!`,
      body: welcomeBody,
      category_id: generalCategory.node_id
    });
    
    console.log('‚úÖ Created welcome discussion with account-specific content');
  } catch (error) {
    if (error.message.includes('422')) {
      console.log('‚ö†Ô∏è  Welcome discussion may already exist');
    } else {
      console.log('‚ö†Ô∏è  Could not create welcome discussion:', error.message);
    }
  }
}

async function main() {
  console.log("\n Starting Doorway Help Desk Setup!");

  try {
    await detectOwnerType();
    
    await enableDiscussions();
    await enableGitHubPages();
    await createDiscussionCategories();
    await updateConfigFile();
    await createInitialAnalyticsData();
    await fetchDiscussionsData();
    await createWelcomeDiscussion();
    
    console.log('\n Setup completed successfully!');
    
  } catch (error) {
    console.error('\n‚ùå Setup failed:', error.message);
    process.exit(1);
  }
}

main();